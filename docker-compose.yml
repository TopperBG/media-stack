version: "3.1"

networks:
  int:
    name: internal
    driver: bridge

services:

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    networks:
      - int
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - ${SERV_CFG_ROOT:?err}/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  radarr:
    depends_on:
      - prowlarr
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      - int
    ports:
      - 7878:7878
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SERV_CFG_ROOT:?err}/radarr:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
    restart: unless-stopped

  sonarr:
    depends_on:
      - prowlarr
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      - int
    ports:
      - 8989:8989
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SERV_CFG_ROOT:?err}/sonarr:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped

  bazarr:
    depends_on:
      - sonarr
      - radarr
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    networks:
      - int
    ports:
      - 6767:6767
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - ${SERV_CFG_ROOT:?err}/bazarr:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - UMASK=002
      #- TRANSMISSION_WEB_HOME=/config/web #optional
      - USER= #optional
      - PASS= #optional
      - WHITELIST= #optional
      - PEERPORT= #optional
      - HOST_WHITELIST= #optional
    volumes:
      - ${SERV_CFG_ROOT:?err}/transmission:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - WEBUI_PORT=8080
      - UMASK=002
    volumes:
      - ${SERV_CFG_ROOT:?err}/qbit:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - AUTO_UPDATE=true #optional
      - RUN_OPTS= #optional
    volumes:
      - ${SERV_CFG_ROOT:?err}/jackett:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=Europe/Sofia
      - WATCHTOWER_CLEANUP=true
      # enable next options only if you set real data in .env file
      #- WATCHTOWER_NOTIFICATIONS=shoutrrr #optional
      #- WATCHTOWER_NOTIFICATION_URL=telegram://${SERV_TG_BOT_ID:?err}@telegram/?channels=${SERV_CHANNEL_ID:?err} #optional
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 0 0 * * *" --rolling-restart --include-restarting --notifications-hostname=${SERV_MYSERVER_NAME:?err}

  flaresolver:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolver
    environment:
      - LOG_LEVEL=info
      - TZ=Europe/Sofia
    ports:
      - 8191:8191
    restart: unless-stopped

  muximux:
    image: lscr.io/linuxserver/muximux:latest
    container_name: muximux
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    ports:
      - 81:80
    volumes:
      - ${SERV_CFG_ROOT:?err}/muximux:/config
    restart: unless-stopped

  overseerr:
    depends_on:
      - plex
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - ${SERV_CFG_ROOT:?err}/overseerr:/app/config
    ports:
      - 5055:5055
    restart: unless-stopped

  plex:
    image: plexinc/pms-docker:latest # lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - VERSION=docker # docker, latest, public or <specific-version>. Check the following link for more information: https://hub.docker.com/r/linuxserver/plex
      # - PLEX_CLAIM=claim-eSzxLSAjxJHCkZB2JWzp # Required for the first startup. Can be found here: https://plex.tv/claim. Warning: There is expiration time!
    volumes:
      - ${SERV_CFG_ROOT:?err}/plex:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/movies
      - ${SERV_STORAGE_PATH:?err}/TV:/tv
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8000:8000
      - 9000:9000
    restart: always

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - ${SERV_CFG_ROOT:?err}/tautulli:/config
    ports:
      - 8181:8181
    restart: unless-stopped

  torrserver:
    image: ghcr.io/yourok/torrserver:latest
    container_name: torrserver
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      #- TS_PORT=8090 #change it if you changed default 8090 in ports
      - TS_DONTKILL=1
    ports:
     - 8090:8090
    volumes:
      - ${SERV_CFG_ROOT:?err}/torrserver:/opt/ts
      - ${SERV_CFG_ROOT:?err}/torrserver/db:/torrserver/db
    restart: always

  plex-meta-manager:
    depends_on:
      - plex
    # image: meisnate12/plex-meta-manager:latest
    image: kometateam/kometa 
    container_name: plex-meta-manager
    environment:
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - TZ=Europe/Sofia
      - PMM_CONFIG=/config/config.yml #optional
      - PMM_TIME=03:00 #optional
      - PMM_RUN=true #optional
      - PMM_TEST=false #optional
      - PMM_NO_MISSING=true #optional
      - PMM_OVERLAYS=true
      - PMM_NO_REPORT=true
      - PMM_DEBUG=false
    volumes:
      - ${SERV_CFG_ROOT:?err}/plex-meta-manager:/config
#    mem_limit: 2g # optional limit cause PMM is resource hungry
#    cpus: 2 # optional  limit cause PMM is resource hungry
    restart: unless-stopped

  plex-image-cleanup:
    env_file:
      - plex-image-cleanup.env
    depends_on:
      - plex
    # image: meisnate12/plex-image-cleanup
    image: kometateam/imagemaid
    container_name: plex-image-cleanup
    environment:
      - TZ=Europe/Sofia #optional
    volumes:
      - ${SERV_CFG_ROOT:?err}/plex-image-cleanup:/config
      - ${SERV_PLEX_CACHE:?err}:/plex:rw # According your Plex installation
    restart: unless-stopped
