version: "3.1"

# Standart thems for theme.park
###
# aquamarine hotline hotpink dracula dark organizr space-gray overseerr plex nord maroon
##
# Community custom themes. Enable them with TP_COMMUNITY_THEME="true"
###
# mind soul reality power space time onedark pine-shadow trueblack ibracorp hotline-old blackberry-abyss blackberry-amethyst blackberry-carol
# all blackbery themes at https://docs.theme-park.dev/community-themes/blackberry-themes/
###
# Addons. Enable it exmpl: TP_ADDON=sonarr-4k-logo
# https://docs.theme-park.dev/themes/addons/


networks:
  int:
    name: internal
    driver: bridge

services:

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    networks:
      - int
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:prowlarr
      #- TP_COMMUNITY_THEME=true #Optional if you plan to use custom themes
      - TP_THEME=plex
    volumes:
      - ${SERV_CFG_ROOT:?err}/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  radarr:
    depends_on:
      - prowlarr
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      - int
    ports:
      - 7878:7878
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:radarr
      - TP_THEME=plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SERV_CFG_ROOT:?err}/radarr:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
    restart: unless-stopped

  sonarr:
    depends_on:
      - prowlarr
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      - int
    ports:
      - 8989:8989
    environment:
      - COMPOSE_PROJECT_NAME
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:sonarr
      - TP_THEME=plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SERV_CFG_ROOT:?err}/sonarr:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped

  bazarr:
    depends_on:
      - sonarr
      - radarr
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    networks:
      - int
    ports:
      - 6767:6767
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:bazarr
      - TP_THEME=plex
    volumes:
      - ${SERV_CFG_ROOT:?err}/bazarr:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - UMASK=002
      #- TRANSMISSION_WEB_HOME=/config/web #optional
      - USER= #optional
      - PASS= #optional
      - WHITELIST= #optional
      - PEERPORT= #optional
      - HOST_WHITELIST= #optional
    volumes:
      - ${SERV_CFG_ROOT:?err}/transmission:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
      - ${SERV_STORAGE_PATH:?err}/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - WEBUI_PORT=8080
      - UMASK=002
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:qbittorrent
      - TP_THEME=plex
    volumes:
      - ${SERV_CFG_ROOT:?err}/qbit:/config
      - ${SERV_STORAGE_PATH:?err}/torrents:/downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - AUTO_UPDATE=true #optional
      #- RUN_OPTS= #optional
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:jackett
      - TP_THEME=plex
    volumes:
      - ${SERV_CFG_ROOT:?err}/jackett:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=Europe/Sofia
      - WATCHTOWER_CLEANUP=true
      # enable next options only if you set real data in .env file
      #- WATCHTOWER_NOTIFICATIONS=shoutrrr #optional
      #- WATCHTOWER_NOTIFICATION_URL=telegram://${SERV_TG_BOT_ID:?err}@telegram/?channels=${SERV_CHANNEL_ID:?err} #optional
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 0 0 * * *" --rolling-restart --include-restarting --notifications-hostname=${SERV_MYSERVER_NAME:?err}

  flaresolver:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolver
    environment:
      - LOG_LEVEL=info
      - TZ=Europe/Sofia
    ports:
      - 8191:8191
    restart: unless-stopped

  muximux:
    image: lscr.io/linuxserver/muximux:latest
    container_name: muximux
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    ports:
      - 81:80
    volumes:
      - ${SERV_CFG_ROOT:?err}/muximux:/config
    restart: unless-stopped

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
    volumes:
      - ${SERV_CFG_ROOT:?err}/overseerr:/app/config
    ports:
      - 5055:5055
    restart: unless-stopped

  plex:
    image: plexinc/pms-docker:latest # lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - VERSION=docker
      - PLEX_CLAIM= #optional token
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:plex
      - TP_COMMUNITY_THEME="true"  #Optional - if you plan to use custom themes
      - TP_THEME=pine-shadow
    volumes:
      - ${SERV_CFG_ROOT:?err}/plex:/config
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:portainer
      - TP_THEME=plex
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8000:8000
      - 9000:9000
    restart: always

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - DOCKER_MODS=ghcr.io/themepark-dev/theme.park:tautulli
      - TP_THEME=plex
    volumes:
      - ${SERV_CFG_ROOT:?err}/tautulli:/config
    ports:
      - 8181:8181
    restart: unless-stopped

  torrserver:
    image: ghcr.io/yourok/torrserver:latest
    container_name: torrserver
    environment:
      - TZ=Europe/Sofia
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      #- TS_PORT=8090 #change it if you changed default 8090 in ports
      - TS_DONTKILL=1
    ports:
     - 8090:8090
    volumes:
      - ${SERV_CFG_ROOT:?err}/torrserver:/opt/ts
      - ${SERV_CFG_ROOT:?err}/torrserver/db:/torrserver/db
    restart: always

 
  plex-meta-manager:
      depends_on:
        - plex
      image: meisnate12/plex-meta-manager:latest
      container_name: plex-meta-manager
      environment:
        - PUID=${SERV_PUID:?err}
        - PGID=${SERV_PGID:?err}
        - TZ=Europe/Sofia
        - PMM_CONFIG=/config/config.yml #optional
        - PMM_TIME=03:00 #optional
        - PMM_RUN=true #optional
        - PMM_TEST=false #optional
        - PMM_NO_MISSING=true #optional
        - PMM_OVERLAYS=true
        - PMM_NO_REPORT=true
        - PMM_DEBUG=false
      volumes:
        - ${SERV_CFG_ROOT:?err}/plex-meta-manager:/config
  #    mem_limit: 2g # optional limit cause PMM is resource hungry
  #    cpus: 2 # optional limit cause PMM is resource hungry
      restart: unless-stopped


  plex-image-cleanup:
      env_file:
        - plex-image-cleanup.env
      depends_on:
        - plex
      image: meisnate12/plex-image-cleanup
      container_name: plex-image-cleanup
      environment:
        - TZ=Europe/Sofia #optional
      volumes:
        - ${SERV_CFG_ROOT:?err}/plex-image-cleanup:/config
        - ${SERV_PLEX_CACHE:?err}:/plex:rw # According your Plex installation
      restart: unless-stopped

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock #Docker conf should use "log-driver": "journald"
    ports:
      - 8888:8080
    restart: unless-stopped
  
  striparr:
    image: mikenye/striparr
    container_name: striparr
    environment:
      - PUID=${SERV_PUID:?err}
      - PGID=${SERV_PGID:?err}
      - TZ=Europe/Sofia
    volumes:
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies
      - ${SERV_STORAGE_PATH:?err}/TV:/TV
    restart: unless-stopped
    network_mode: host
    
  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - ${SERV_STORAGE_PATH:?err}:/downloads
    restart: always
    user: ${SERV_PUID:?err}:${SERV_PGID:?err}
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    environment:
      - TZ=Europe/Sofia
      # General config
      - UN_DEBUG=false
      - UN_LOG_FILE=
      - UN_LOG_FILES=10
      - UN_LOG_FILE_MB=10
      - UN_INTERVAL=2m
      - UN_START_DELAY=1m
      - UN_RETRY_DELAY=5m
      - UN_MAX_RETRIES=3
      - UN_PARALLEL=1
      - UN_FILE_MODE=0644
      - UN_DIR_MODE=0755
      # Sonarr Config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY:?err}
      - UN_SONARR_0_PATHS_0=/downloads/TV #According Sonarr mounts
      - UN_SONARR_0_PROTOCOLS=torrent
      - UN_SONARR_0_TIMEOUT=10s
      - UN_SONARR_0_DELETE_ORIG=true
      - UN_SONARR_0_DELETE_DELAY=5m
      # Radarr Config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY:?err}
      - UN_RADARR_0_PATHS_0=/downloads/Movies #According Radarr mounts
      - UN_RADARR_0_PROTOCOLS=torrent
      - UN_RADARR_0_TIMEOUT=10s
      - UN_RADARR_0_DELETE_ORIG=true
      # Webhook Config
      - UN_WEBHOOK_0_URL=https://api.telegram.org/${SERV_TG_BOT_ID:?err}/sendMessage
      - UN_WEBHOOK_0_NAME=Telegram
      - UN_WEBHOOK_0_NICKNAME=${SERV_OWNER_ID:?err}
      - UN_WEBHOOK_0_CHANNEL=${SERV_CHANNEL_ID:?err}
      - UN_WEBHOOK_0_TIMEOUT=10s
      - UN_WEBHOOK_0_SILENT=false
      - UN_WEBHOOK_0_IGNORE_SSL=false
      - UN_WEBHOOK_0_EXCLUDE_0=
      - UN_WEBHOOK_0_EVENTS_0=0
      - UN_WEBHOOK_0_TEMPLATE_PATH=telegram
      - UN_WEBHOOK_0_CONTENT_TYPE=application/json

  lingarr:
    image: lingarr/lingarr:latest
    container_name: lingarr
    restart: unless-stopped
    ports:
      - "9876:8080"
    volumes:
      - ${SERV_STORAGE_PATH:?err}/Movies:/Movies #match with radarr
      - ${SERV_STORAGE_PATH:?err}/TV:/TV #match with sonarr
      - ${SERV_CFG_ROOT:?err}/lingarr:/app/config
    networks:
      - lingarr
  LibreTranslate:
    depends_on:
      - lingarr
    container_name: LibreTranslate
    image: libretranslate/libretranslate:latest
    restart: unless-stopped
    environment:
      - LT_LOAD_ONLY=en,bg # Important, replace with your preferred languages
      - LT_UPDATE_MODELS=true
    ports:
      - 5000:5000
    volumes:
      - ${SERV_CFG_ROOT:?err}/libretranslate:/home/libretranslate/.local/share/argos-translate
      - libretranslate_models:/home/libretranslate/.local:rw
    networks:
      - lingarr
    healthcheck:
      test: ["CMD-SHELL", "./venv/bin/python scripts/healthcheck.py"]

networks:
  lingarr:
    external: true

volumes:
   libretranslate_models:
